#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 1e3 + 13;


int r, c, res[ N ][ N ];
char g[ N ][ N ];

void scan() {
    cin >> r >> c;
    for(int i = 1; i <= r; i += 1) {
        for(int j = 1; j <= c; j += 1) {
            cin >> g[ i ][ j ];
        }
    }
}

int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
int D[ N ][ N ];

bool isValidCell(int x,int y) {
    return (x >= 1 && x <= r && y >= 1 && y <= c);
}

void bfs() {

    for(int i = 1; i <= r; i += 1)
        for(int j = 1; j <= c; j += 1) 
               D[ i ][ j ] = INT_MAX;

    deque<pair<int,int>> Q;
    Q.push_front( {1, 1} );
    D[ 1 ][ 1 ] = 0;

    while( !Q.empty() ) {
        auto u = Q.front(); 
        Q.pop_front();
        for(int i = 0; i < 4; i += 1) {
            int x = u.first + dx[ i ];
            int y = u.second + dy[ i ];
            if( isValidCell(x, y) ) {
                int cost = 0;
                if( g[ u.first ][ u.second ] != g[ x ][ y ] ) cost = 1;
                if( D[ x ][ y ] > D[ u.first ][ u.second ] + cost ) {
                    D[ x ][ y ] = D[ u.first ][ u.second ] + cost;
                    if( cost == 1 ) Q.push_back( {x, y} );
                    else Q.push_front( {x, y} );
                }
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int testcase; cin >> testcase;
    while( testcase-- ) {
        scan();
        bfs();
        cout << D[ r ][ c ] << "\n";
    }

    return 0;
}

/*
4
2 2
aa
aa
2 3
abc
def
6 6
akaccc
aaacfc
amdfcc
aokhdd
zyxwdp
zyxwdd
5 5
abbbc
abacc
aaacc
aefci
cdgdd
*/
